properties(
    [
        buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '5')), 
    ]
)

pipeline {
    agent any
    
    parameters {
        string(defaultValue: 'develop', description: 'Branch', name: 'BRANCH')
        string(defaultValue: 'sit', description: 'Configuration Environment', name: 'ENV')
    }
    
    stages {
        stage('Code Checkout') {
            steps {
                git branch: "${params.BRANCH}", credentialsId: 'GitHub', url: 'https://github.com/arrakya/Neighbor.Core.git'
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    dir('Neighbor.Server/Neighbor.Server.ApiGateway'){
                        sh "docker build -f Dockerfile -t arrak/neighbor.server.api_gateway:${params.ENV}-latest --build-arg EnvName=${params.ENV} --no-cache ."
                    }
                }
            }
        }
        stage('Docker Deploy') {
            steps {
                script {
                    dir('Neighbor.Server'){
                        catchError(buildResult: 'SUCCESS') {
                            sh "docker container rm gateway-${params.ENV} --force"
                        }
                        sh "docker-compose -f docker-compose.yml up -d gateway-${params.ENV}"
                    }
                }
            }
        }
    }
}
